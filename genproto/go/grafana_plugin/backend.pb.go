// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend.proto

package grafana_plugin

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PluginStatusRequest_FetchInfo int32

const (
	PluginStatusRequest_STATUS  PluginStatusRequest_FetchInfo = 0
	PluginStatusRequest_API     PluginStatusRequest_FetchInfo = 1
	PluginStatusRequest_METRICS PluginStatusRequest_FetchInfo = 2
	PluginStatusRequest_DEBUG   PluginStatusRequest_FetchInfo = 3
)

var PluginStatusRequest_FetchInfo_name = map[int32]string{
	0: "STATUS",
	1: "API",
	2: "METRICS",
	3: "DEBUG",
}

var PluginStatusRequest_FetchInfo_value = map[string]int32{
	"STATUS":  0,
	"API":     1,
	"METRICS": 2,
	"DEBUG":   3,
}

func (x PluginStatusRequest_FetchInfo) String() string {
	return proto.EnumName(PluginStatusRequest_FetchInfo_name, int32(x))
}

func (PluginStatusRequest_FetchInfo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{1, 0}
}

type PluginStatusResponse_PluginStatus int32

const (
	PluginStatusResponse_UNKNOWN PluginStatusResponse_PluginStatus = 0
	PluginStatusResponse_OK      PluginStatusResponse_PluginStatus = 1
	PluginStatusResponse_ERROR   PluginStatusResponse_PluginStatus = 2
)

var PluginStatusResponse_PluginStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "ERROR",
}

var PluginStatusResponse_PluginStatus_value = map[string]int32{
	"UNKNOWN": 0,
	"OK":      1,
	"ERROR":   2,
}

func (x PluginStatusResponse_PluginStatus) String() string {
	return proto.EnumName(PluginStatusResponse_PluginStatus_name, int32(x))
}

func (PluginStatusResponse_PluginStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{2, 0}
}

type PluginConfig struct {
	Id                      int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId                   int64             `protobuf:"varint,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Name                    string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type                    string            `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Url                     string            `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	JsonData                string            `protobuf:"bytes,6,opt,name=jsonData,proto3" json:"jsonData,omitempty"`
	DecryptedSecureJsonData map[string]string `protobuf:"bytes,7,rep,name=decryptedSecureJsonData,proto3" json:"decryptedSecureJsonData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral    struct{}          `json:"-"`
	XXX_unrecognized        []byte            `json:"-"`
	XXX_sizecache           int32             `json:"-"`
}

func (m *PluginConfig) Reset()         { *m = PluginConfig{} }
func (m *PluginConfig) String() string { return proto.CompactTextString(m) }
func (*PluginConfig) ProtoMessage()    {}
func (*PluginConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{0}
}

func (m *PluginConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginConfig.Unmarshal(m, b)
}
func (m *PluginConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginConfig.Marshal(b, m, deterministic)
}
func (m *PluginConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginConfig.Merge(m, src)
}
func (m *PluginConfig) XXX_Size() int {
	return xxx_messageInfo_PluginConfig.Size(m)
}
func (m *PluginConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PluginConfig proto.InternalMessageInfo

func (m *PluginConfig) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PluginConfig) GetOrgId() int64 {
	if m != nil {
		return m.OrgId
	}
	return 0
}

func (m *PluginConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PluginConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PluginConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PluginConfig) GetJsonData() string {
	if m != nil {
		return m.JsonData
	}
	return ""
}

func (m *PluginConfig) GetDecryptedSecureJsonData() map[string]string {
	if m != nil {
		return m.DecryptedSecureJsonData
	}
	return nil
}

type PluginStatusRequest struct {
	// Plugin Configuration
	Config *PluginConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Environment info
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Get an OpenAPI description (viewer+)
	Fetch                PluginStatusRequest_FetchInfo `protobuf:"varint,3,opt,name=fetch,proto3,enum=grafana.plugin.PluginStatusRequest_FetchInfo" json:"fetch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *PluginStatusRequest) Reset()         { *m = PluginStatusRequest{} }
func (m *PluginStatusRequest) String() string { return proto.CompactTextString(m) }
func (*PluginStatusRequest) ProtoMessage()    {}
func (*PluginStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{1}
}

func (m *PluginStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginStatusRequest.Unmarshal(m, b)
}
func (m *PluginStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginStatusRequest.Marshal(b, m, deterministic)
}
func (m *PluginStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginStatusRequest.Merge(m, src)
}
func (m *PluginStatusRequest) XXX_Size() int {
	return xxx_messageInfo_PluginStatusRequest.Size(m)
}
func (m *PluginStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PluginStatusRequest proto.InternalMessageInfo

func (m *PluginStatusRequest) GetConfig() *PluginConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *PluginStatusRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *PluginStatusRequest) GetFetch() PluginStatusRequest_FetchInfo {
	if m != nil {
		return m.Fetch
	}
	return PluginStatusRequest_STATUS
}

type PluginStatusResponse struct {
	Status               PluginStatusResponse_PluginStatus `protobuf:"varint,1,opt,name=status,proto3,enum=grafana.plugin.PluginStatusResponse_PluginStatus" json:"status,omitempty"`
	Info                 string                            `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *PluginStatusResponse) Reset()         { *m = PluginStatusResponse{} }
func (m *PluginStatusResponse) String() string { return proto.CompactTextString(m) }
func (*PluginStatusResponse) ProtoMessage()    {}
func (*PluginStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{2}
}

func (m *PluginStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginStatusResponse.Unmarshal(m, b)
}
func (m *PluginStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginStatusResponse.Marshal(b, m, deterministic)
}
func (m *PluginStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginStatusResponse.Merge(m, src)
}
func (m *PluginStatusResponse) XXX_Size() int {
	return xxx_messageInfo_PluginStatusResponse.Size(m)
}
func (m *PluginStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PluginStatusResponse proto.InternalMessageInfo

func (m *PluginStatusResponse) GetStatus() PluginStatusResponse_PluginStatus {
	if m != nil {
		return m.Status
	}
	return PluginStatusResponse_UNKNOWN
}

func (m *PluginStatusResponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type TimeRange struct {
	FromEpochMS          int64    `protobuf:"varint,1,opt,name=fromEpochMS,proto3" json:"fromEpochMS,omitempty"`
	ToEpochMS            int64    `protobuf:"varint,2,opt,name=toEpochMS,proto3" json:"toEpochMS,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeRange) Reset()         { *m = TimeRange{} }
func (m *TimeRange) String() string { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()    {}
func (*TimeRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{3}
}

func (m *TimeRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeRange.Unmarshal(m, b)
}
func (m *TimeRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeRange.Marshal(b, m, deterministic)
}
func (m *TimeRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRange.Merge(m, src)
}
func (m *TimeRange) XXX_Size() int {
	return xxx_messageInfo_TimeRange.Size(m)
}
func (m *TimeRange) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRange.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRange proto.InternalMessageInfo

func (m *TimeRange) GetFromEpochMS() int64 {
	if m != nil {
		return m.FromEpochMS
	}
	return 0
}

func (m *TimeRange) GetToEpochMS() int64 {
	if m != nil {
		return m.ToEpochMS
	}
	return 0
}

type DataQuery struct {
	RefId                string     `protobuf:"bytes,1,opt,name=refId,proto3" json:"refId,omitempty"`
	MaxDataPoints        int64      `protobuf:"varint,2,opt,name=maxDataPoints,proto3" json:"maxDataPoints,omitempty"`
	IntervalMS           int64      `protobuf:"varint,3,opt,name=intervalMS,proto3" json:"intervalMS,omitempty"`
	TimeRange            *TimeRange `protobuf:"bytes,4,opt,name=timeRange,proto3" json:"timeRange,omitempty"`
	Json                 []byte     `protobuf:"bytes,5,opt,name=json,proto3" json:"json,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DataQuery) Reset()         { *m = DataQuery{} }
func (m *DataQuery) String() string { return proto.CompactTextString(m) }
func (*DataQuery) ProtoMessage()    {}
func (*DataQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{4}
}

func (m *DataQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataQuery.Unmarshal(m, b)
}
func (m *DataQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataQuery.Marshal(b, m, deterministic)
}
func (m *DataQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataQuery.Merge(m, src)
}
func (m *DataQuery) XXX_Size() int {
	return xxx_messageInfo_DataQuery.Size(m)
}
func (m *DataQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DataQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DataQuery proto.InternalMessageInfo

func (m *DataQuery) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *DataQuery) GetMaxDataPoints() int64 {
	if m != nil {
		return m.MaxDataPoints
	}
	return 0
}

func (m *DataQuery) GetIntervalMS() int64 {
	if m != nil {
		return m.IntervalMS
	}
	return 0
}

func (m *DataQuery) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *DataQuery) GetJson() []byte {
	if m != nil {
		return m.Json
	}
	return nil
}

type DataQueryRequest struct {
	// Plugin Configuration
	Config *PluginConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Environment info
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of queries
	Queries              []*DataQuery `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DataQueryRequest) Reset()         { *m = DataQueryRequest{} }
func (m *DataQueryRequest) String() string { return proto.CompactTextString(m) }
func (*DataQueryRequest) ProtoMessage()    {}
func (*DataQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{5}
}

func (m *DataQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataQueryRequest.Unmarshal(m, b)
}
func (m *DataQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataQueryRequest.Marshal(b, m, deterministic)
}
func (m *DataQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataQueryRequest.Merge(m, src)
}
func (m *DataQueryRequest) XXX_Size() int {
	return xxx_messageInfo_DataQueryRequest.Size(m)
}
func (m *DataQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DataQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DataQueryRequest proto.InternalMessageInfo

func (m *DataQueryRequest) GetConfig() *PluginConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *DataQueryRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *DataQueryRequest) GetQueries() []*DataQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

type DataQueryResponse struct {
	// Arrow encoded DataFrames
	// Each frame encodes its own: Errors, meta, and refId
	Frames [][]byte `protobuf:"bytes,1,rep,name=frames,proto3" json:"frames,omitempty"`
	// Additional response metadata
	Metadata             map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DataQueryResponse) Reset()         { *m = DataQueryResponse{} }
func (m *DataQueryResponse) String() string { return proto.CompactTextString(m) }
func (*DataQueryResponse) ProtoMessage()    {}
func (*DataQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{6}
}

func (m *DataQueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataQueryResponse.Unmarshal(m, b)
}
func (m *DataQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataQueryResponse.Marshal(b, m, deterministic)
}
func (m *DataQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataQueryResponse.Merge(m, src)
}
func (m *DataQueryResponse) XXX_Size() int {
	return xxx_messageInfo_DataQueryResponse.Size(m)
}
func (m *DataQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DataQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DataQueryResponse proto.InternalMessageInfo

func (m *DataQueryResponse) GetFrames() [][]byte {
	if m != nil {
		return m.Frames
	}
	return nil
}

func (m *DataQueryResponse) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ResourceRequest struct {
	// Plugin Configuration
	Config *PluginConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// HTTP Style parameters
	Headers              map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Method               string            `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Path                 string            `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Body                 []byte            `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResourceRequest) Reset()         { *m = ResourceRequest{} }
func (m *ResourceRequest) String() string { return proto.CompactTextString(m) }
func (*ResourceRequest) ProtoMessage()    {}
func (*ResourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{7}
}

func (m *ResourceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceRequest.Unmarshal(m, b)
}
func (m *ResourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceRequest.Marshal(b, m, deterministic)
}
func (m *ResourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceRequest.Merge(m, src)
}
func (m *ResourceRequest) XXX_Size() int {
	return xxx_messageInfo_ResourceRequest.Size(m)
}
func (m *ResourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceRequest proto.InternalMessageInfo

func (m *ResourceRequest) GetConfig() *PluginConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ResourceRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ResourceRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *ResourceRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ResourceRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type ResourceResponse struct {
	Code                 int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Headers              map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body                 []byte            `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResourceResponse) Reset()         { *m = ResourceResponse{} }
func (m *ResourceResponse) String() string { return proto.CompactTextString(m) }
func (*ResourceResponse) ProtoMessage()    {}
func (*ResourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{8}
}

func (m *ResourceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceResponse.Unmarshal(m, b)
}
func (m *ResourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceResponse.Marshal(b, m, deterministic)
}
func (m *ResourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceResponse.Merge(m, src)
}
func (m *ResourceResponse) XXX_Size() int {
	return xxx_messageInfo_ResourceResponse.Size(m)
}
func (m *ResourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceResponse proto.InternalMessageInfo

func (m *ResourceResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ResourceResponse) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ResourceResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type StreamingRequest struct {
	PluginId int64 `protobuf:"varint,1,opt,name=pluginId,proto3" json:"pluginId,omitempty"`
	// Environment info
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The topic we are talking to
	Topic string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	// The message
	Body string `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	// Flag if the user is already listening
	Subscribed           bool     `protobuf:"varint,5,opt,name=subscribed,proto3" json:"subscribed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingRequest) Reset()         { *m = StreamingRequest{} }
func (m *StreamingRequest) String() string { return proto.CompactTextString(m) }
func (*StreamingRequest) ProtoMessage()    {}
func (*StreamingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{9}
}

func (m *StreamingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingRequest.Unmarshal(m, b)
}
func (m *StreamingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingRequest.Marshal(b, m, deterministic)
}
func (m *StreamingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingRequest.Merge(m, src)
}
func (m *StreamingRequest) XXX_Size() int {
	return xxx_messageInfo_StreamingRequest.Size(m)
}
func (m *StreamingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingRequest proto.InternalMessageInfo

func (m *StreamingRequest) GetPluginId() int64 {
	if m != nil {
		return m.PluginId
	}
	return 0
}

func (m *StreamingRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *StreamingRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *StreamingRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *StreamingRequest) GetSubscribed() bool {
	if m != nil {
		return m.Subscribed
	}
	return false
}

type StreamingMessage struct {
	PluginId             int64    `protobuf:"varint,1,opt,name=pluginId,proto3" json:"pluginId,omitempty"`
	Topic                string   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingMessage) Reset()         { *m = StreamingMessage{} }
func (m *StreamingMessage) String() string { return proto.CompactTextString(m) }
func (*StreamingMessage) ProtoMessage()    {}
func (*StreamingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{10}
}

func (m *StreamingMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingMessage.Unmarshal(m, b)
}
func (m *StreamingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingMessage.Marshal(b, m, deterministic)
}
func (m *StreamingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingMessage.Merge(m, src)
}
func (m *StreamingMessage) XXX_Size() int {
	return xxx_messageInfo_StreamingMessage.Size(m)
}
func (m *StreamingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingMessage proto.InternalMessageInfo

func (m *StreamingMessage) GetPluginId() int64 {
	if m != nil {
		return m.PluginId
	}
	return 0
}

func (m *StreamingMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *StreamingMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type StreamingClose struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingClose) Reset()         { *m = StreamingClose{} }
func (m *StreamingClose) String() string { return proto.CompactTextString(m) }
func (*StreamingClose) ProtoMessage()    {}
func (*StreamingClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{11}
}

func (m *StreamingClose) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingClose.Unmarshal(m, b)
}
func (m *StreamingClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingClose.Marshal(b, m, deterministic)
}
func (m *StreamingClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingClose.Merge(m, src)
}
func (m *StreamingClose) XXX_Size() int {
	return xxx_messageInfo_StreamingClose.Size(m)
}
func (m *StreamingClose) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingClose.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingClose proto.InternalMessageInfo

func (m *StreamingClose) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type RenderRequest struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Width                int32    `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height               int32    `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Timeout              int32    `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Timezone             string   `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Encoding             string   `protobuf:"bytes,6,opt,name=encoding,proto3" json:"encoding,omitempty"`
	FilePath             string   `protobuf:"bytes,7,opt,name=filePath,proto3" json:"filePath,omitempty"`
	RenderKey            string   `protobuf:"bytes,8,opt,name=renderKey,proto3" json:"renderKey,omitempty"`
	Domain               string   `protobuf:"bytes,9,opt,name=domain,proto3" json:"domain,omitempty"`
	Debug                bool     `protobuf:"varint,10,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenderRequest) Reset()         { *m = RenderRequest{} }
func (m *RenderRequest) String() string { return proto.CompactTextString(m) }
func (*RenderRequest) ProtoMessage()    {}
func (*RenderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{12}
}

func (m *RenderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenderRequest.Unmarshal(m, b)
}
func (m *RenderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenderRequest.Marshal(b, m, deterministic)
}
func (m *RenderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderRequest.Merge(m, src)
}
func (m *RenderRequest) XXX_Size() int {
	return xxx_messageInfo_RenderRequest.Size(m)
}
func (m *RenderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenderRequest proto.InternalMessageInfo

func (m *RenderRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RenderRequest) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *RenderRequest) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *RenderRequest) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RenderRequest) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *RenderRequest) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *RenderRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *RenderRequest) GetRenderKey() string {
	if m != nil {
		return m.RenderKey
	}
	return ""
}

func (m *RenderRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RenderRequest) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

type RenderResponse struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenderResponse) Reset()         { *m = RenderResponse{} }
func (m *RenderResponse) String() string { return proto.CompactTextString(m) }
func (*RenderResponse) ProtoMessage()    {}
func (*RenderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab9ba5b8d8b2ba5, []int{13}
}

func (m *RenderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenderResponse.Unmarshal(m, b)
}
func (m *RenderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenderResponse.Marshal(b, m, deterministic)
}
func (m *RenderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderResponse.Merge(m, src)
}
func (m *RenderResponse) XXX_Size() int {
	return xxx_messageInfo_RenderResponse.Size(m)
}
func (m *RenderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RenderResponse proto.InternalMessageInfo

func (m *RenderResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("grafana.plugin.PluginStatusRequest_FetchInfo", PluginStatusRequest_FetchInfo_name, PluginStatusRequest_FetchInfo_value)
	proto.RegisterEnum("grafana.plugin.PluginStatusResponse_PluginStatus", PluginStatusResponse_PluginStatus_name, PluginStatusResponse_PluginStatus_value)
	proto.RegisterType((*PluginConfig)(nil), "grafana.plugin.PluginConfig")
	proto.RegisterMapType((map[string]string)(nil), "grafana.plugin.PluginConfig.DecryptedSecureJsonDataEntry")
	proto.RegisterType((*PluginStatusRequest)(nil), "grafana.plugin.PluginStatusRequest")
	proto.RegisterMapType((map[string]string)(nil), "grafana.plugin.PluginStatusRequest.HeadersEntry")
	proto.RegisterType((*PluginStatusResponse)(nil), "grafana.plugin.PluginStatusResponse")
	proto.RegisterType((*TimeRange)(nil), "grafana.plugin.TimeRange")
	proto.RegisterType((*DataQuery)(nil), "grafana.plugin.DataQuery")
	proto.RegisterType((*DataQueryRequest)(nil), "grafana.plugin.DataQueryRequest")
	proto.RegisterMapType((map[string]string)(nil), "grafana.plugin.DataQueryRequest.HeadersEntry")
	proto.RegisterType((*DataQueryResponse)(nil), "grafana.plugin.DataQueryResponse")
	proto.RegisterMapType((map[string]string)(nil), "grafana.plugin.DataQueryResponse.MetadataEntry")
	proto.RegisterType((*ResourceRequest)(nil), "grafana.plugin.ResourceRequest")
	proto.RegisterMapType((map[string]string)(nil), "grafana.plugin.ResourceRequest.HeadersEntry")
	proto.RegisterType((*ResourceResponse)(nil), "grafana.plugin.ResourceResponse")
	proto.RegisterMapType((map[string]string)(nil), "grafana.plugin.ResourceResponse.HeadersEntry")
	proto.RegisterType((*StreamingRequest)(nil), "grafana.plugin.StreamingRequest")
	proto.RegisterMapType((map[string]string)(nil), "grafana.plugin.StreamingRequest.HeadersEntry")
	proto.RegisterType((*StreamingMessage)(nil), "grafana.plugin.StreamingMessage")
	proto.RegisterType((*StreamingClose)(nil), "grafana.plugin.StreamingClose")
	proto.RegisterType((*RenderRequest)(nil), "grafana.plugin.RenderRequest")
	proto.RegisterType((*RenderResponse)(nil), "grafana.plugin.RenderResponse")
}

func init() { proto.RegisterFile("backend.proto", fileDescriptor_5ab9ba5b8d8b2ba5) }

var fileDescriptor_5ab9ba5b8d8b2ba5 = []byte{
	// 1203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4d, 0x93, 0xdb, 0x44,
	0x13, 0x8e, 0xe4, 0xc8, 0x1f, 0xbd, 0x1f, 0xf1, 0x3b, 0xef, 0x12, 0x14, 0x13, 0x82, 0x31, 0x29,
	0x6a, 0x0f, 0xe0, 0x04, 0x87, 0x2a, 0x42, 0x38, 0x25, 0x5e, 0x67, 0x71, 0x5c, 0xce, 0x9a, 0xf1,
	0x6e, 0x51, 0x95, 0x03, 0x55, 0xb2, 0xd4, 0x96, 0xc5, 0x5a, 0x1a, 0x67, 0x34, 0x0a, 0x98, 0x23,
	0xc5, 0x85, 0xe2, 0x77, 0xf0, 0x0f, 0xe0, 0xcc, 0x99, 0xe2, 0xc6, 0x5f, 0xe1, 0x4c, 0x15, 0x35,
	0x33, 0x92, 0xd7, 0xf6, 0xc6, 0xf6, 0xa6, 0x76, 0x6f, 0xdd, 0x3d, 0x33, 0x8f, 0x9e, 0x67, 0xba,
	0x7b, 0x66, 0x04, 0x3b, 0x03, 0xc7, 0x3d, 0xc5, 0xc8, 0xab, 0x4f, 0x38, 0x13, 0x8c, 0xec, 0xfa,
	0xdc, 0x19, 0x3a, 0x91, 0x53, 0x9f, 0x8c, 0x13, 0x3f, 0x88, 0x2a, 0xef, 0xf8, 0x8c, 0xf9, 0x63,
	0xbc, 0xa7, 0x46, 0x07, 0xc9, 0xf0, 0x1e, 0x86, 0x13, 0x31, 0xd5, 0x93, 0x6b, 0x7f, 0x99, 0xb0,
	0xdd, 0x53, 0xf3, 0x9a, 0x2c, 0x1a, 0x06, 0x3e, 0xd9, 0x05, 0x33, 0xf0, 0x6c, 0xa3, 0x6a, 0xec,
	0xe7, 0xa8, 0x19, 0x78, 0x64, 0x0f, 0x2c, 0xc6, 0xfd, 0xb6, 0x67, 0x9b, 0x2a, 0xa4, 0x1d, 0x42,
	0xe0, 0x7a, 0xe4, 0x84, 0x68, 0xe7, 0xaa, 0xc6, 0x7e, 0x89, 0x2a, 0x5b, 0xc6, 0xc4, 0x74, 0x82,
	0xf6, 0x75, 0x1d, 0x93, 0x36, 0x29, 0x43, 0x2e, 0xe1, 0x63, 0xdb, 0x52, 0x21, 0x69, 0x92, 0x0a,
	0x14, 0xbf, 0x8d, 0x59, 0x74, 0xe0, 0x08, 0xc7, 0xce, 0xab, 0xf0, 0xcc, 0x27, 0x31, 0xbc, 0xed,
	0xa1, 0xcb, 0xa7, 0x13, 0x81, 0x5e, 0x1f, 0xdd, 0x84, 0xe3, 0xb3, 0x6c, 0x6a, 0xa1, 0x9a, 0xdb,
	0xdf, 0x6a, 0x7c, 0x5e, 0x5f, 0xd4, 0x56, 0x9f, 0xa7, 0x5e, 0x3f, 0x78, 0xfd, 0xda, 0x56, 0x24,
	0xf8, 0x94, 0xae, 0x42, 0xae, 0x3c, 0x83, 0xdb, 0xeb, 0x16, 0x4a, 0x09, 0xa7, 0x38, 0x55, 0x3b,
	0x52, 0xa2, 0xd2, 0x94, 0x5b, 0xf2, 0xca, 0x19, 0x27, 0xa8, 0xb6, 0xa4, 0x44, 0xb5, 0xf3, 0xc8,
	0x7c, 0x68, 0xd4, 0xfe, 0x36, 0xe1, 0xff, 0x9a, 0x52, 0x5f, 0x38, 0x22, 0x89, 0x29, 0xbe, 0x4c,
	0x30, 0x16, 0xe4, 0x53, 0xc8, 0xbb, 0x8a, 0xa3, 0x82, 0xd9, 0x6a, 0xdc, 0x5e, 0xa7, 0x83, 0xa6,
	0x73, 0xc9, 0x33, 0x28, 0x8c, 0xd0, 0xf1, 0x90, 0xc7, 0xb6, 0xa9, 0xe4, 0xdf, 0x7f, 0xfd, 0xb2,
	0x85, 0x6f, 0xd5, 0xbf, 0xd4, 0x4b, 0xb4, 0xea, 0x0c, 0x80, 0x34, 0xc1, 0x1a, 0xa2, 0x70, 0x47,
	0x2a, 0x63, 0xbb, 0x8d, 0x8f, 0x2f, 0x82, 0xf4, 0x54, 0x2e, 0x68, 0x47, 0x43, 0x46, 0xf5, 0xda,
	0xca, 0x23, 0xd8, 0x9e, 0x47, 0x7f, 0xa3, 0xad, 0x79, 0x08, 0xa5, 0x19, 0x1e, 0x01, 0xc8, 0xf7,
	0x8f, 0x1f, 0x1f, 0x9f, 0xf4, 0xcb, 0xd7, 0x48, 0x01, 0x72, 0x8f, 0x7b, 0xed, 0xb2, 0x41, 0xb6,
	0xa0, 0xd0, 0x6d, 0x1d, 0xd3, 0x76, 0xb3, 0x5f, 0x36, 0x49, 0x09, 0xac, 0x83, 0xd6, 0x93, 0x93,
	0xc3, 0x72, 0xae, 0xf6, 0xab, 0x01, 0x7b, 0x8b, 0xf4, 0xe2, 0x09, 0x8b, 0x62, 0x24, 0x6d, 0xc8,
	0xc7, 0x2a, 0xa2, 0x18, 0xec, 0x36, 0x3e, 0x59, 0x2f, 0x4a, 0xaf, 0x5a, 0x0c, 0xa6, 0x00, 0xb2,
	0x76, 0x83, 0x68, 0xc8, 0x52, 0xda, 0xca, 0xae, 0xd5, 0xb3, 0xce, 0xd0, 0x73, 0x25, 0xbf, 0x93,
	0xe7, 0x9d, 0xe7, 0x47, 0x5f, 0x3f, 0x2f, 0x5f, 0x23, 0x79, 0x30, 0x8f, 0x3a, 0x65, 0x43, 0xf2,
	0x6c, 0x51, 0x7a, 0x44, 0xcb, 0x66, 0xad, 0x03, 0xa5, 0xe3, 0x20, 0x44, 0xea, 0x44, 0x3e, 0x92,
	0x2a, 0x6c, 0x0d, 0x39, 0x0b, 0x5b, 0x13, 0xe6, 0x8e, 0xba, 0xfd, 0xb4, 0x9f, 0xe6, 0x43, 0xe4,
	0x36, 0x94, 0x04, 0xcb, 0xc6, 0x75, 0x73, 0x9d, 0x05, 0x6a, 0xbf, 0x19, 0x50, 0x92, 0x35, 0xf8,
	0x55, 0x82, 0x5c, 0x6d, 0x2b, 0xc7, 0x61, 0xdb, 0x4b, 0xb7, 0x5a, 0x3b, 0xe4, 0x2e, 0xec, 0x84,
	0xce, 0xf7, 0x72, 0x56, 0x8f, 0x05, 0x91, 0x88, 0x53, 0x94, 0xc5, 0x20, 0xb9, 0x03, 0x10, 0x44,
	0x02, 0xf9, 0x2b, 0x67, 0xdc, 0xed, 0xab, 0xf4, 0xe7, 0xe8, 0x5c, 0x84, 0x7c, 0x06, 0x25, 0x91,
	0xd1, 0x56, 0xbd, 0xbb, 0xd5, 0xb8, 0xb5, 0xbc, 0x91, 0x33, 0x5d, 0xf4, 0x6c, 0xae, 0xdc, 0x33,
	0xd9, 0xb9, 0xaa, 0xb9, 0xb7, 0xa9, 0xb2, 0x6b, 0x3f, 0x9a, 0x50, 0x9e, 0xd1, 0xbe, 0x5c, 0xf5,
	0x1f, 0x2e, 0x57, 0xff, 0xb9, 0x9a, 0x5d, 0xfe, 0xd0, 0x8a, 0xd2, 0x7f, 0x00, 0x85, 0x97, 0x09,
	0xf2, 0x00, 0x63, 0x3b, 0xa7, 0x80, 0x6e, 0xad, 0x06, 0xca, 0x66, 0x5e, 0xaa, 0xd4, 0x7f, 0x37,
	0xe0, 0x7f, 0x73, 0xdc, 0xd2, 0x6a, 0xbd, 0x09, 0xf9, 0x21, 0x77, 0x42, 0x94, 0xd5, 0x9a, 0xdb,
	0xdf, 0xa6, 0xa9, 0x47, 0x3a, 0x50, 0x0c, 0x51, 0x38, 0x9e, 0x3c, 0xe5, 0xb4, 0xd0, 0x7b, 0x6b,
	0x84, 0xa6, 0x45, 0xdc, 0x4d, 0x57, 0x68, 0xa9, 0x33, 0x80, 0xca, 0x17, 0xb0, 0xb3, 0x30, 0xf4,
	0x46, 0xbc, 0x7f, 0x31, 0xe1, 0x06, 0xc5, 0x98, 0x25, 0xdc, 0xc5, 0xcb, 0xe5, 0xee, 0xe9, 0x72,
	0xee, 0x3e, 0x5a, 0x5e, 0xb6, 0xf4, 0x9d, 0x15, 0xa9, 0xbb, 0x09, 0xf9, 0x10, 0xc5, 0x88, 0x79,
	0xe9, 0x45, 0x93, 0x7a, 0xb2, 0xf4, 0x26, 0x8e, 0x18, 0x65, 0x57, 0x8d, 0xb4, 0x65, 0x6c, 0xc0,
	0xbc, 0x69, 0x56, 0x8e, 0xd2, 0xbe, 0x54, 0x16, 0xff, 0x30, 0xa0, 0x7c, 0xc6, 0x32, 0x4d, 0x22,
	0x81, 0xeb, 0x2e, 0xf3, 0x50, 0x21, 0x58, 0x54, 0xd9, 0x17, 0x28, 0xd4, 0x65, 0x98, 0x15, 0x6a,
	0x33, 0x05, 0xb9, 0x2b, 0x52, 0xf0, 0xaf, 0x01, 0xe5, 0xbe, 0xe0, 0xe8, 0x84, 0x41, 0xe4, 0x67,
	0x09, 0xad, 0x40, 0x51, 0xb3, 0x6a, 0x67, 0xb7, 0xfc, 0xcc, 0xbf, 0x80, 0x92, 0x65, 0xb8, 0x15,
	0x4a, 0xf6, 0xc0, 0x12, 0x6c, 0x12, 0xb8, 0x69, 0xda, 0xb4, 0x33, 0xd3, 0x97, 0x66, 0x4d, 0xda,
	0xf2, 0x74, 0x8a, 0x93, 0x41, 0xec, 0xf2, 0x60, 0x80, 0x9e, 0xca, 0x5d, 0x91, 0xce, 0x45, 0x2e,
	0xa5, 0xff, 0x9b, 0x39, 0xf9, 0x5d, 0x8c, 0x63, 0xc7, 0xc7, 0xb5, 0xf2, 0x67, 0xac, 0xcd, 0x79,
	0xd6, 0x36, 0x14, 0x42, 0xbd, 0x38, 0x55, 0x93, 0xb9, 0xb5, 0x0f, 0x61, 0x77, 0x86, 0xdf, 0x1c,
	0xb3, 0x18, 0x25, 0x82, 0xcb, 0x92, 0x48, 0xa4, 0xd0, 0xda, 0xa9, 0xfd, 0x6c, 0xc2, 0x0e, 0xc5,
	0xc8, 0x43, 0x9e, 0x25, 0x21, 0x7d, 0x16, 0x19, 0x67, 0xcf, 0xa2, 0x3d, 0xb0, 0xbe, 0x0b, 0x3c,
	0x31, 0x52, 0xdf, 0xb6, 0xa8, 0x76, 0x64, 0xfd, 0x8f, 0x30, 0xf0, 0x47, 0x42, 0x7d, 0xda, 0xa2,
	0xa9, 0x27, 0x39, 0xc9, 0x73, 0x98, 0x25, 0x42, 0x6d, 0xa6, 0x45, 0x33, 0x57, 0xea, 0x93, 0xe6,
	0x0f, 0x2c, 0xc2, 0xf4, 0xd5, 0x35, 0xf3, 0xe5, 0x18, 0x46, 0x2e, 0xf3, 0x82, 0xc8, 0xcf, 0x9e,
	0x5e, 0x99, 0x2f, 0xc7, 0x86, 0xc1, 0x18, 0x7b, 0xb2, 0xab, 0x0a, 0x7a, 0x2c, 0xf3, 0xe5, 0x4d,
	0xc5, 0x15, 0xfd, 0x0e, 0x4e, 0xed, 0xa2, 0x1a, 0x3c, 0x0b, 0x48, 0x8e, 0x1e, 0x0b, 0x9d, 0x20,
	0xb2, 0x4b, 0xba, 0x47, 0xb5, 0x27, 0x15, 0x79, 0x38, 0x48, 0x7c, 0x1b, 0x54, 0x52, 0xb5, 0x23,
	0xf7, 0x2c, 0xdb, 0x8a, 0xb4, 0xa5, 0xf6, 0xc0, 0x42, 0xce, 0x19, 0xcf, 0xee, 0x36, 0xe5, 0x34,
	0x7e, 0x32, 0x61, 0xe7, 0x89, 0x7e, 0xd6, 0xea, 0x13, 0x86, 0x50, 0xb0, 0x9a, 0x23, 0x74, 0x4f,
	0xc9, 0x07, 0x17, 0x78, 0xbb, 0x54, 0xee, 0x5e, 0xe4, 0x2d, 0x40, 0xba, 0x50, 0xcc, 0x7a, 0x93,
	0xbc, 0xb7, 0xe1, 0x88, 0xaa, 0x54, 0x37, 0xb5, 0x35, 0xe9, 0xcd, 0xdf, 0xd9, 0xd5, 0x4d, 0xd7,
	0x55, 0xe5, 0xfd, 0x8d, 0xe7, 0x7c, 0xe3, 0x4f, 0x03, 0x6e, 0x1c, 0xea, 0x49, 0xbd, 0xb1, 0x23,
	0x86, 0x8c, 0x87, 0xe4, 0x05, 0xbc, 0x95, 0xd9, 0x5a, 0x54, 0x56, 0x55, 0x57, 0xa0, 0xe0, 0x85,
	0x7c, 0xbf, 0xce, 0x63, 0x5f, 0xa1, 0x96, 0x7f, 0x0c, 0xb8, 0x31, 0xeb, 0x97, 0x34, 0xa9, 0x1d,
	0x28, 0x34, 0x59, 0x14, 0xa1, 0x2b, 0xc8, 0xda, 0x9b, 0xe5, 0x3c, 0xf5, 0xe5, 0xce, 0xbe, 0x6f,
	0x90, 0x2e, 0x14, 0x7a, 0x9c, 0xb9, 0x18, 0xc7, 0xa4, 0xba, 0xe9, 0xe0, 0xda, 0x0c, 0x48, 0x0e,
	0x00, 0x0e, 0x82, 0xd8, 0x4d, 0xe9, 0xdd, 0xac, 0xeb, 0xdf, 0xa8, 0x7a, 0xf6, 0x1b, 0x55, 0x6f,
	0xc9, 0xdf, 0xa8, 0xca, 0x9d, 0x95, 0x38, 0xea, 0x48, 0x68, 0xf4, 0x65, 0x89, 0xc9, 0x82, 0x47,
	0x4e, 0x0e, 0x21, 0xaf, 0x6d, 0xf2, 0xee, 0xf9, 0x4c, 0xcc, 0x9d, 0x0f, 0xe7, 0x41, 0x17, 0x7b,
	0x66, 0x90, 0x57, 0x24, 0x1e, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x75, 0xf0, 0xd3, 0x7c, 0xfa,
	0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BackendPluginClient is the client API for BackendPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendPluginClient interface {
	// Get the plugin status
	Check(ctx context.Context, in *PluginStatusRequest, opts ...grpc.CallOption) (*PluginStatusResponse, error)
	// HTTP Style request
	Resource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	// Well typed query interface
	DataQuery(ctx context.Context, in *DataQueryRequest, opts ...grpc.CallOption) (*DataQueryResponse, error)
}

type backendPluginClient struct {
	cc *grpc.ClientConn
}

func NewBackendPluginClient(cc *grpc.ClientConn) BackendPluginClient {
	return &backendPluginClient{cc}
}

func (c *backendPluginClient) Check(ctx context.Context, in *PluginStatusRequest, opts ...grpc.CallOption) (*PluginStatusResponse, error) {
	out := new(PluginStatusResponse)
	err := c.cc.Invoke(ctx, "/grafana.plugin.BackendPlugin/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendPluginClient) Resource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, "/grafana.plugin.BackendPlugin/Resource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendPluginClient) DataQuery(ctx context.Context, in *DataQueryRequest, opts ...grpc.CallOption) (*DataQueryResponse, error) {
	out := new(DataQueryResponse)
	err := c.cc.Invoke(ctx, "/grafana.plugin.BackendPlugin/DataQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendPluginServer is the server API for BackendPlugin service.
type BackendPluginServer interface {
	// Get the plugin status
	Check(context.Context, *PluginStatusRequest) (*PluginStatusResponse, error)
	// HTTP Style request
	Resource(context.Context, *ResourceRequest) (*ResourceResponse, error)
	// Well typed query interface
	DataQuery(context.Context, *DataQueryRequest) (*DataQueryResponse, error)
}

// UnimplementedBackendPluginServer can be embedded to have forward compatible implementations.
type UnimplementedBackendPluginServer struct {
}

func (*UnimplementedBackendPluginServer) Check(ctx context.Context, req *PluginStatusRequest) (*PluginStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedBackendPluginServer) Resource(ctx context.Context, req *ResourceRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resource not implemented")
}
func (*UnimplementedBackendPluginServer) DataQuery(ctx context.Context, req *DataQueryRequest) (*DataQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataQuery not implemented")
}

func RegisterBackendPluginServer(s *grpc.Server, srv BackendPluginServer) {
	s.RegisterService(&_BackendPlugin_serviceDesc, srv)
}

func _BackendPlugin_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendPluginServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafana.plugin.BackendPlugin/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendPluginServer).Check(ctx, req.(*PluginStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendPlugin_Resource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendPluginServer).Resource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafana.plugin.BackendPlugin/Resource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendPluginServer).Resource(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendPlugin_DataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendPluginServer).DataQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafana.plugin.BackendPlugin/DataQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendPluginServer).DataQuery(ctx, req.(*DataQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BackendPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grafana.plugin.BackendPlugin",
	HandlerType: (*BackendPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _BackendPlugin_Check_Handler,
		},
		{
			MethodName: "Resource",
			Handler:    _BackendPlugin_Resource_Handler,
		},
		{
			MethodName: "DataQuery",
			Handler:    _BackendPlugin_DataQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}

// GrafanaPlatformClient is the client API for GrafanaPlatform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrafanaPlatformClient interface {
	PlatformPluginRequest(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	PlatformPluginQuery(ctx context.Context, in *DataQueryRequest, opts ...grpc.CallOption) (*DataQueryResponse, error)
}

type grafanaPlatformClient struct {
	cc *grpc.ClientConn
}

func NewGrafanaPlatformClient(cc *grpc.ClientConn) GrafanaPlatformClient {
	return &grafanaPlatformClient{cc}
}

func (c *grafanaPlatformClient) PlatformPluginRequest(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, "/grafana.plugin.GrafanaPlatform/PlatformPluginRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaPlatformClient) PlatformPluginQuery(ctx context.Context, in *DataQueryRequest, opts ...grpc.CallOption) (*DataQueryResponse, error) {
	out := new(DataQueryResponse)
	err := c.cc.Invoke(ctx, "/grafana.plugin.GrafanaPlatform/PlatformPluginQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrafanaPlatformServer is the server API for GrafanaPlatform service.
type GrafanaPlatformServer interface {
	PlatformPluginRequest(context.Context, *ResourceRequest) (*ResourceResponse, error)
	PlatformPluginQuery(context.Context, *DataQueryRequest) (*DataQueryResponse, error)
}

// UnimplementedGrafanaPlatformServer can be embedded to have forward compatible implementations.
type UnimplementedGrafanaPlatformServer struct {
}

func (*UnimplementedGrafanaPlatformServer) PlatformPluginRequest(ctx context.Context, req *ResourceRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformPluginRequest not implemented")
}
func (*UnimplementedGrafanaPlatformServer) PlatformPluginQuery(ctx context.Context, req *DataQueryRequest) (*DataQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformPluginQuery not implemented")
}

func RegisterGrafanaPlatformServer(s *grpc.Server, srv GrafanaPlatformServer) {
	s.RegisterService(&_GrafanaPlatform_serviceDesc, srv)
}

func _GrafanaPlatform_PlatformPluginRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaPlatformServer).PlatformPluginRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafana.plugin.GrafanaPlatform/PlatformPluginRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaPlatformServer).PlatformPluginRequest(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaPlatform_PlatformPluginQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaPlatformServer).PlatformPluginQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafana.plugin.GrafanaPlatform/PlatformPluginQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaPlatformServer).PlatformPluginQuery(ctx, req.(*DataQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrafanaPlatform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grafana.plugin.GrafanaPlatform",
	HandlerType: (*GrafanaPlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlatformPluginRequest",
			Handler:    _GrafanaPlatform_PlatformPluginRequest_Handler,
		},
		{
			MethodName: "PlatformPluginQuery",
			Handler:    _GrafanaPlatform_PlatformPluginQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}

// StreamingPluginClient is the client API for StreamingPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamingPluginClient interface {
	// Called by grafana before the first request
	// Grafana server will set up a websocket that will broadcast to all listeners
	Connect(ctx context.Context, in *PluginConfig, opts ...grpc.CallOption) (StreamingPlugin_ConnectClient, error)
	// If the message is not empty, send that to the user
	// throwing an error will make sure the user is not subscribed
	Process(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (*StreamingMessage, error)
	// Stop streaming to that instance, returns the number of open connections
	Disconnect(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StreamingClose, error)
}

type streamingPluginClient struct {
	cc *grpc.ClientConn
}

func NewStreamingPluginClient(cc *grpc.ClientConn) StreamingPluginClient {
	return &streamingPluginClient{cc}
}

func (c *streamingPluginClient) Connect(ctx context.Context, in *PluginConfig, opts ...grpc.CallOption) (StreamingPlugin_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamingPlugin_serviceDesc.Streams[0], "/grafana.plugin.StreamingPlugin/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingPluginConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingPlugin_ConnectClient interface {
	Recv() (*StreamingMessage, error)
	grpc.ClientStream
}

type streamingPluginConnectClient struct {
	grpc.ClientStream
}

func (x *streamingPluginConnectClient) Recv() (*StreamingMessage, error) {
	m := new(StreamingMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingPluginClient) Process(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (*StreamingMessage, error) {
	out := new(StreamingMessage)
	err := c.cc.Invoke(ctx, "/grafana.plugin.StreamingPlugin/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingPluginClient) Disconnect(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StreamingClose, error) {
	out := new(StreamingClose)
	err := c.cc.Invoke(ctx, "/grafana.plugin.StreamingPlugin/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamingPluginServer is the server API for StreamingPlugin service.
type StreamingPluginServer interface {
	// Called by grafana before the first request
	// Grafana server will set up a websocket that will broadcast to all listeners
	Connect(*PluginConfig, StreamingPlugin_ConnectServer) error
	// If the message is not empty, send that to the user
	// throwing an error will make sure the user is not subscribed
	Process(context.Context, *StreamingRequest) (*StreamingMessage, error)
	// Stop streaming to that instance, returns the number of open connections
	Disconnect(context.Context, *empty.Empty) (*StreamingClose, error)
}

// UnimplementedStreamingPluginServer can be embedded to have forward compatible implementations.
type UnimplementedStreamingPluginServer struct {
}

func (*UnimplementedStreamingPluginServer) Connect(req *PluginConfig, srv StreamingPlugin_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedStreamingPluginServer) Process(ctx context.Context, req *StreamingRequest) (*StreamingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (*UnimplementedStreamingPluginServer) Disconnect(ctx context.Context, req *empty.Empty) (*StreamingClose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}

func RegisterStreamingPluginServer(s *grpc.Server, srv StreamingPluginServer) {
	s.RegisterService(&_StreamingPlugin_serviceDesc, srv)
}

func _StreamingPlugin_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PluginConfig)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingPluginServer).Connect(m, &streamingPluginConnectServer{stream})
}

type StreamingPlugin_ConnectServer interface {
	Send(*StreamingMessage) error
	grpc.ServerStream
}

type streamingPluginConnectServer struct {
	grpc.ServerStream
}

func (x *streamingPluginConnectServer) Send(m *StreamingMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamingPlugin_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingPluginServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafana.plugin.StreamingPlugin/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingPluginServer).Process(ctx, req.(*StreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingPlugin_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingPluginServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafana.plugin.StreamingPlugin/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingPluginServer).Disconnect(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamingPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grafana.plugin.StreamingPlugin",
	HandlerType: (*StreamingPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _StreamingPlugin_Process_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _StreamingPlugin_Disconnect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _StreamingPlugin_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend.proto",
}

// RendererClient is the client API for Renderer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RendererClient interface {
	Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderResponse, error)
}

type rendererClient struct {
	cc *grpc.ClientConn
}

func NewRendererClient(cc *grpc.ClientConn) RendererClient {
	return &rendererClient{cc}
}

func (c *rendererClient) Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderResponse, error) {
	out := new(RenderResponse)
	err := c.cc.Invoke(ctx, "/grafana.plugin.Renderer/Render", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RendererServer is the server API for Renderer service.
type RendererServer interface {
	Render(context.Context, *RenderRequest) (*RenderResponse, error)
}

// UnimplementedRendererServer can be embedded to have forward compatible implementations.
type UnimplementedRendererServer struct {
}

func (*UnimplementedRendererServer) Render(ctx context.Context, req *RenderRequest) (*RenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Render not implemented")
}

func RegisterRendererServer(s *grpc.Server, srv RendererServer) {
	s.RegisterService(&_Renderer_serviceDesc, srv)
}

func _Renderer_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RendererServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafana.plugin.Renderer/Render",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RendererServer).Render(ctx, req.(*RenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Renderer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grafana.plugin.Renderer",
	HandlerType: (*RendererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Render",
			Handler:    _Renderer_Render_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}
