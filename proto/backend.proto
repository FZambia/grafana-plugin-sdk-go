syntax = "proto3";
package pluginv2;

option go_package = ".;pluginv2";

//-----------------------------------------------
// Common
//-----------------------------------------------

message PluginConfig {
  bytes jsonData = 1;
  int64 lastUpdatedMS = 3;
}

message DataSourceConfig {
  int64 id = 1;
  string name = 2;
  string url = 3;
  string user = 4;
  string database = 5;
  bool basicAuthEnabled = 6;
  string basicAuthUser = 7;
  bytes jsonData = 8;
  int64 lastUpdatedMS = 10;
}

message NotifierConfig {
  int64 id = 1;
  string name = 2;
  bytes jsonData = 3;
  int64 lastUpdatedMS = 4;
}

message User {
  string login = 1;
  string name = 2;
  string email = 3;
  string role = 4;
}

message PluginContext {
  // The Grafana organization id request originating from.
  int64 orgId = 1;
  string pluginId = 2;

  // The Grafana user request originating from.
  // Will not be provided if Grafana backend initiated the request.
  User user = 3;

  // Plugin config.
  PluginConfig config = 4;

  // Data source plugin config is the configured data source instance config.
  // Will not be provided if request not targeting a data source instance.
  DataSourceConfig dataSourceConfig = 5;

  // Notifier plugin config is the configured notifier instance config.
  // Will not be provided if request not targeting a notifier instance.
  NotifierConfig notifierConfig = 6;
}

//---------------------------------------------------------
// Resource service enables HTTP-style requests over gRPC.
//---------------------------------------------------------

message StringList {
  repeated string values = 1;
}

message CallResourceRequest {
  // Contextuual plugin request information.
  PluginContext ctx = 1;
  string path = 2;
  string method = 3;
  string url = 4;
  map<string,StringList> headers = 5;
  bytes body = 6;
}

message CallResourceResponse {
  int32 code = 1;
  map<string,StringList> headers = 2;
  bytes body = 3;
}

//-----------------------------------------------
// Data
//-----------------------------------------------

message TimeRange {
  int64 fromEpochMS = 1;
  int64 toEpochMS = 2;
}

message DataQuery {
  string refId = 1;
  int64 maxDataPoints = 2;
  int64 intervalMS = 3;
  TimeRange timeRange = 4;
  bytes json = 5;
}

// QueryDataRequest
message QueryDataRequest {
  // Contextuual plugin request information.
  PluginContext ctx = 1;

  //Info about the user who calls the plugin.
  User user = 2;

  // Environment info
  map<string,string> headers = 3;

  // List of data queries
  repeated DataQuery queries = 4;
}

message QueryDataResponse {
  // Map of refId to response
  map<string,DataResponse> responses = 1;
}

message DataResponse {
  // Arrow encoded DataFrames
  // Frame has its own meta, warnings, and repeats refId
  repeated bytes frames = 1;
  string error = 2;
  bytes jsonMeta = 3; // Warning: Current ignored by frontend. Would be for metadata about the query.
}

//-----------------------------------------------
// Diagnostics
//-----------------------------------------------

service Diagnostics {
  rpc CheckHealth(CheckHealthRequest) returns (CheckHealthResponse);
  rpc CollectMetrics(CollectMetricsRequest) returns (CollectMetricsResponse);
}

message CollectMetricsRequest {
}

message CollectMetricsResponse {
  message Payload {
    bytes prometheus = 1;
  }

  Payload metrics = 1;
}

message CheckHealthRequest {
  // Contextuual plugin request information.
  PluginContext ctx = 1;
}

message CheckHealthResponse {
  enum HealthStatus {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
  }

  HealthStatus status = 1;
  string message = 2;
  bytes jsonDetails = 3;
}

//-----------------------------------------------
// Plugin - generic plugin support
// Currently only applicable for app plugins.
//-----------------------------------------------

service Plugin {
  rpc CheckPluginHealth(CheckHealthRequest) returns (CheckHealthResponse);
  rpc CallPluginResource(CallResourceRequest) returns (stream CallResourceResponse);
}

//-----------------------------------------------
// Data source plugin
// Currently maps to a data source plugin in Grafana.
//-----------------------------------------------

service DataSourcePlugin {
  rpc CheckDataSourceHealth(CheckHealthRequest) returns (CheckHealthResponse);
  rpc CallDataSourceResource(CallResourceRequest) returns (stream CallResourceResponse);
  rpc QueryData(QueryDataRequest) returns (QueryDataResponse);
}

//-----------------------------------------------
// Transform plugin - Very experimental
//-----------------------------------------------

service TransformPlugin {
  rpc TransformData(QueryDataRequest) returns (QueryDataResponse);
}

service TransformDataCallBack {
  rpc QueryData(QueryDataRequest) returns (QueryDataResponse);
}

//-----------------------------------------------
// Notifier plugin example for brewity
//-----------------------------------------------

service NotifierPlugin {
  rpc CheckNotifierHealth(CheckHealthRequest) returns (CheckHealthResponse);
  rpc CallNotifierResource(CallResourceRequest) returns (stream CallResourceResponse);
  rpc SendNotification(SendNotificationRequest) returns (SendNotificationResponse);
}

//-----------------------------------------------
// Renderer plugin example for brewity
//-----------------------------------------------

service RendererPlugin {
  rpc CheckRendererHealth(CheckHealthRequest) returns (CheckHealthResponse);
  rpc CallRendererResource(CallResourceRequest) returns (stream CallResourceResponse);
  rpc RenderImage(RenderImageRequest) returns (RenderImageResponse);
}
