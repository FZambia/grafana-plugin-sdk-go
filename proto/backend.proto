syntax = "proto3";
import "google/protobuf/empty.proto";
package pluginv2;

//-----------------------------------------------
// Common
//-----------------------------------------------

message PluginConfig {
  int64 id = 1;
  int64 orgId = 2;
  string name = 3;
  string type = 4;
  string url = 5;
  string jsonData = 6;
  map<string,string> decryptedSecureJsonData = 7;
}

//-----------------------------------------------
// All Backend Plugins Implement
//-----------------------------------------------

service Backend {
  // Information about what a backend plugin supports/expects
  rpc GetSchema(GetSchema.Request) returns (GetSchema.Response);

  // One-time initialization, called before other functions below
  rpc Configure(Configure.Request) returns (Configure.Response);

  // Diagnostics
  rpc CollectMetrics(CollectMetrics.Request) returns (CollectMetrics.Response);
  rpc CheckHealth(CheckHealth.Request) returns (CheckHealth.Response);

  // Validation triggered when plugin configuration are being saved in Grafana
  rpc ValidatePluginConfig(ValidatePluginConfig.Request) returns (ValidatePluginConfig.Response);

  // Resource
  rpc CallResource(CallResource.Request) returns (CallResource.Response);

  // Data
  rpc QueryData(QueryData.Request) returns (QueryData.Response);
}

//-----------------------------------------------
// Schema and resource configuration
//-----------------------------------------------

message Schema {
  message Block {
    repeated Attribute attributes = 1;
  }

  message Attribute {
    enum Type {
      NUMERIC = 0;
      TEXT = 1;
      BOOLEAN = 2;
    }

    string name = 1;
    Type type = 2;
    string displayName = 3;
    string description = 4;
    bool required = 5;
    bool sensitive = 6;
  }

  // The version of the schema.
  // Schemas are versioned, so that plugins can upgrade a saved
  // plugin config state when the schema is changed.
  int64 schemaVersion = 1;

  // Block is the top level configuration block for this schema.
  Block block = 2;
}

message Resource {
  enum Permission {
    VIEWER = 0;
    EDITOR = 1;
    ADMIN = 2;
  }

  message Route {
    enum Method {
      ANY = 0;
      GET = 1;
      PUT = 2;
      POST = 3;
      DELETE = 4;
      PATCH = 5;
      HEAD = 6;
    }

    string path = 1;
    Method method = 2;
    Permission permission = 3;
  }

  Permission permission = 1;
  map<string,Resource> childResources = 2;
  repeated Route routes = 3;
}

message GetSchema {
  message Request {
  }

  message Response {
    Schema pluginSchema = 1; // global configuration schema, eg.g from Grafana config or env variables
    Schema pluginConfigSchema = 2; // plugin configuration schema, e.g. datasource/app config stored in Grafana database
    map<string,Resource> resources = 3; // resource configuration
  }
}

message HostInfo {
  string version = 1; // v6.5.2
  string edition = 2; // oss or enterprise
  bool validLicense = 3;
  bool expiredLicense = 4;
}

message Configure {
  message Request {
    HostInfo grafanaHostInfo = 1; // information about the Grafana host instance
    bytes config = 2; // extracted json config from Grafana config or env variables based on GetSchema
  }

  message Response {
  }
}

message ValidatePluginConfig {
  message Request {
    PluginConfig config = 1;
  }

  message Response {
  }
}

//-----------------------------------------------
// Resource
//-----------------------------------------------

message CallResource {
  message Request {
    PluginConfig config = 1;
    map<string,string> headers = 2;
    string method = 3;
    string path = 4;
    bytes body = 5;
  }

  message Response {
    int32 code = 1;
    map<string,string> headers = 2;
    bytes body = 3;
  }
}

//-----------------------------------------------
// Data
//-----------------------------------------------

message TimeRange {
  int64 fromEpochMS = 1;
  int64 toEpochMS = 2;
}

message DataQuery {
  string refId = 1;
  int64 maxDataPoints = 2;
  int64 intervalMS = 3;
  TimeRange timeRange = 4;
  bytes json = 5;
  bool debug = 6;
}

message QueryData {
  message Request {
    PluginConfig config = 1;
    map<string,string> headers = 2;
    repeated DataQuery queries = 3;
  }

  message Response {
    // Arrow encoded DataFrames
    // Each frame encodes its own: Errors, meta, and refId
    repeated bytes frames = 1;

    // Additional response metadata
    map<string,string> metadata = 2;
  }
}

//-----------------------------------------------
// Diagnostics
//-----------------------------------------------

service Diagnostics {
  rpc CollectMetrics(CollectMetrics.Request) returns (CollectMetrics.Response);
  rpc CheckHealth(CheckHealth.Request) returns (CheckHealth.Response);
}

message CollectMetrics {
  message Request {
  }

  message Payload {
    bytes prometheus = 1;
  }

  message Response {
    Payload metrics = 1;
  }
}

message CheckHealth {
  message Request {
  }

  message Response {
    enum HealthStatus {
      UNKNOWN = 0; // starting etc
      OK = 1;
      ERROR = 2;
    }

    HealthStatus status = 1;
    string info = 2;
  }
}

//-----------------------------------------------
// Transform
//-----------------------------------------------

service TransformCallBack {
  rpc QueryData(QueryData.Request) returns (QueryData.Response);
}

//-----------------------------------------------------------------
// Streaming support aimed to support similar features to STOMP
// consider Apache Flight for more complex/standard
//-----------------------------------------------------------------

message StreamingRequest {
  int64 pluginId = 1; // match the id from connect request (app or datasource)

  // Environment info
  map<string,string> headers = 2;

  // The topic we are talking to
  string topic = 3;

  // The message
  string body = 4;

  // Flag if the user is already listening
  bool subscribed = 5;
}

message StreamingMessage {
  int64 pluginId = 1;
  string topic = 2; // will be broadcast to eveyone listening to this app|ds + topic
  string message = 3; // JSON Blob
}

message StreamingClose {
  int64 count = 1;
}

service StreamingPlugin {
  // Called by grafana before the first request
  // Grafana server will set up a websocket that will broadcast to all listeners
  rpc Connect(PluginConfig) returns (stream StreamingMessage);

  // If the message is not empty, send that to the user
  // throwing an error will make sure the user is not subscribed
  rpc Process(StreamingRequest) returns (StreamingMessage);

  // Stop streaming to that instance, returns the number of open connections
  rpc Disconnect(google.protobuf.Empty) returns (StreamingClose);
}

//-----------------------------------------------------------------
// Renderer
//-----------------------------------------------------------------

service Renderer {
  rpc Render(Render.Request) returns (Render.Response);
}

message Render {
  message Request {
    string url = 1;
    int32 width = 2;
    int32 height = 3;
    int32 timeout = 4;
    string timezone = 5;
    string encoding = 6;
    string filePath = 7;
    string renderKey = 8;
    string domain = 9;
    bool debug = 10;
  }

  message Response {
    string error = 1;
  }
}

//-----------------------------------------------
// Allow plugins to access other plugins
// (TODO: Streaming Signature, or Grafana-Server will be the Server for this)
//
//
//-----------------------------------------------

service GrafanaPlatform {
  rpc CallResource(CallResource.Request) returns (CallResource.Response);
  rpc QueryData(QueryData.Request) returns (QueryData.Response);
}
